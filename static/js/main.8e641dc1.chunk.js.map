{"version":3,"sources":["components/screen.ts","components/Board/Card/CardStatus.ts","logo.svg","components/Levels/Level.ts","components/Board/Card/index.tsx","components/MButton/index.tsx","components/Levels/LevelUtils.ts","components/Board/StatusBar/index.tsx","components/Board/Card/Card.ts","components/Board/Card/CardUtils.ts","components/Board/index.tsx","components/Levels/index.tsx","components/Main.tsx","App.js","reportWebVitals.js","index.js"],"names":["Screen","CardStatus","Level","MCard","props","card","onCard","icon","Icon","color","Status","reverse","uncovered","Id","matched","onClick","className","aria-hidden","MButton","mclick","text","console","log","disabled","getJSONByLevel","level","baby","Cards","normal","seriously","imposible","getLevelName","StatusBar","onHome","tries","onReset","window","confirm","Card","updateCardArray","cardArray","cardItem","map","initialState","cardTemp","loading","Board","state","this","setState","JSON","parse","stringify","cards","sort","Math","random","prevProps","isTrap","setTimeout","handleReset","validarVictoria","aciertos","filter","item","length","traps","alert","bind","index","handleCard","React","onSelectLevel","defaultValue","onChange","op","Number","target","value","Main","screen","main","changeScreen","handleSelectLevel","getMainView","board","Levels","switchView","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8e641dc1.chunk.js","sourcesContent":["export enum Screen{\r\n    main = 1,\r\n    board\r\n}","export enum CardStatus{\r\n    reverse = 1,\r\n    uncovered,\r\n    matched\r\n}","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export  enum Level {\r\n    baby = 1,\r\n    normal,\r\n    seriously,\r\n    imposible\r\n}","import * as React from 'react';\r\nimport Card from './Card';\r\nimport { CardStatus } from './CardStatus';\r\n\r\ntype Props = {\r\n    onCard: () => void;\r\n    card: Card;\r\n};\r\n\r\nconst MCard = (props: Props) => {\r\n    const { card, onCard } = props;\r\n    let icon = card.Icon;\r\n    let color = ''\r\n    switch (card.Status) {\r\n        case CardStatus.reverse:\r\n            icon = \"times\";\r\n            break;\r\n        case CardStatus.uncovered:\r\n            color = card.Id < 0 ? 'alert-danger' : 'alert-warning';\r\n            break;\r\n        case CardStatus.matched:\r\n            color = 'alert-success';\r\n            break;\r\n    }\r\n    return (\r\n        <div\r\n            onClick={onCard}\r\n            className={`card m-1 px-1 py-5 ${color}`}>\r\n            <i\r\n                className={`fa fa-${icon} fa-2x`}\r\n                aria-hidden=\"true\"\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MCard;","import * as React from 'react';\r\n\r\ntype Props = {\r\n    mclick?: () => void;\r\n    text: string;\r\n};\r\n\r\nconst MButton = (props: Props) => {\r\n    const { mclick, text } = props;\r\n    return (\r\n        <button\r\n            onClick={() => { mclick ? mclick() : console.log('') }}\r\n            disabled={mclick ? false : true}\r\n            className='btn btn-sm btn-outline-dark mb-3 me-3 rounded'>\r\n            {text}\r\n        </button>\r\n    );\r\n}\r\n\r\nexport default MButton;","import Card from '../Board/Card/Card';\r\nimport { Level } from './Level';\r\nimport baby from './LevelsJSON/baby.json';\r\nimport normal from './LevelsJSON/normal.json';\r\nimport seriously from './LevelsJSON/Seriously.json';\r\nimport imposible from './LevelsJSON/imposible.json';\r\n\r\nexport const getJSONByLevel = (level: number): Array<Card> => {\r\n    switch (level) {\r\n        case Level.baby:\r\n            return baby.Cards;\r\n        case Level.normal:\r\n            return normal.Cards;\r\n        case Level.seriously:\r\n            return seriously.Cards;\r\n        case Level.imposible:\r\n            return imposible.Cards;\r\n        default:\r\n            return [];\r\n    }\r\n};\r\n\r\nexport const getLevelName = (level: number): string => {\r\n    switch (level) {\r\n        case Level.baby:\r\n            return \"Baby\"\r\n        case Level.normal:\r\n            return \"Normal\"\r\n        case Level.seriously:\r\n            return \"Seriously?\"\r\n        case Level.imposible:\r\n            return \"Imposible\"\r\n        default:\r\n            return \"\";\r\n    }\r\n};\r\n","import * as React from 'react';\r\nimport MButton from '../../MButton';\r\nimport ILevel from '../../Levels/ILevel';\r\nimport { getLevelName } from '../../Levels/LevelUtils';\r\n\r\ntype Props = {\r\n    tries: number;\r\n    onHome: () => void;\r\n    onReset: () => void;\r\n    level: ILevel;\r\n};\r\n\r\nconst StatusBar = (props: Props) => {\r\n    const { onHome, tries, onReset, level } = props;\r\n    return (\r\n        <div className='text-start'>\r\n            <div className='btn-group'>\r\n                <MButton\r\n                    text='Regresar'\r\n                    mclick={() =>\r\n                        window.confirm(\"¿Desea salir de la partida?\") && onHome()\r\n                    } />\r\n                <MButton\r\n                    text='Reiniciar'\r\n                    mclick={() =>\r\n                        window.confirm(\"¿Desea reiniciar la partida?\") && onReset()\r\n                    } />\r\n                <MButton\r\n                    text={`Intentos: ${tries}`} />\r\n\r\n                <MButton\r\n                    text={`Nivel: ${getLevelName(level.level)}`} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default StatusBar;","import { CardStatus } from './CardStatus';\r\nexport default class Card {\r\n    constructor(\r\n        public Id: number = 0,\r\n        public Icon: string = \"times\",\r\n        public Status: number = CardStatus.reverse,\r\n    ) { }\r\n}","import Card from \"./Card\";\r\n\r\nexport const updateCardArray = (cardArray: Card[], cardItem: Card) => {\r\n    return cardArray.map(card => {\r\n        return cardItem.Id === card.Id ? cardItem : card;\r\n    });\r\n}","import * as React from 'react';\r\nimport MCard from './Card';\r\nimport StatusBar from './StatusBar/index';\r\nimport Card from './Card/Card';\r\nimport { CardStatus } from './Card/CardStatus';\r\nimport { updateCardArray } from './Card/CardUtils';\r\nimport ILevel from '../Levels/ILevel';\r\n\r\ntype Props = {\r\n    onHome: () => void;\r\n    level: ILevel;\r\n};\r\ntype State = {\r\n    tries: number;\r\n    cardArray: Card[],\r\n    cardTemp: Card,\r\n    loading: boolean\r\n};\r\n\r\nconst initialState: State = {\r\n    tries: 0,\r\n    cardArray: [],\r\n    cardTemp: new Card(),\r\n    loading: false\r\n}\r\n\r\nexport default class Board extends React.Component<Props, State>{\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = initialState\r\n    }\r\n\r\n    public componentDidMount() {\r\n        this.setState({\r\n            cardArray: JSON.parse(\r\n                JSON.stringify(\r\n                    this.props.level.cards.sort(\r\n                        () => Math.random() - 0.5\r\n                    )))\r\n        });\r\n    }\r\n\r\n    public componentDidUpdate(prevProps: Props) {\r\n        const { level } = this.props;\r\n        if (prevProps.level !== level) {\r\n            this.setState({\r\n                cardArray: JSON.parse(\r\n                    JSON.stringify(\r\n                        this.props.level.cards.sort(\r\n                            () => Math.random() - 0.5\r\n                        )))\r\n            });\r\n        }\r\n    }\r\n\r\n    public handleReset(isTrap?: boolean) {\r\n        const { tries, cardArray } = this.state;\r\n        this.setState({\r\n            tries: isTrap ? tries : 0,\r\n            cardArray: isTrap\r\n                ? cardArray.sort(() => Math.random() - 0.5)\r\n                : JSON.parse(\r\n                    JSON.stringify(\r\n                        this.props.level.cards.sort(\r\n                            () => Math.random() - 0.5\r\n                        ))),\r\n            cardTemp: new Card(),\r\n            loading: false\r\n        });\r\n    }\r\n\r\n    private handleCard(cardItem: Card) {\r\n        let { cardArray, cardTemp, loading, tries } = this.state;\r\n        if (cardItem.Status !== CardStatus.matched && !loading && cardTemp.Id !== cardItem.Id) {\r\n            if (cardTemp.Id === 0) {\r\n                if (cardItem.Status === CardStatus.reverse) {\r\n                    cardItem.Status = CardStatus.uncovered;\r\n                    cardTemp = cardItem;\r\n                    cardArray = updateCardArray(cardArray, cardItem);\r\n                    this.setState({ cardArray, cardTemp });\r\n                    if (cardItem.Id < 0) {\r\n                        this.setState({loading: true});\r\n                        setTimeout(() => {\r\n                            cardItem.Status = CardStatus.reverse;\r\n                            this.setState({ cardArray });\r\n                            this.handleReset(true);\r\n                        }, 2000);\r\n                    }\r\n                };\r\n            } else {\r\n                if (cardTemp.Icon === cardItem.Icon) {\r\n                    cardTemp.Status = CardStatus.matched;\r\n                    cardArray = updateCardArray(cardArray, cardTemp);\r\n                    cardItem.Status = CardStatus.matched;\r\n                    cardArray = updateCardArray(cardArray, cardItem);\r\n                    cardTemp = new Card();\r\n                    this.setState({ cardArray, cardTemp });\r\n                } else {\r\n                    cardItem.Status = CardStatus.uncovered;\r\n                    cardArray = updateCardArray(cardArray, cardItem);\r\n                    this.setState({ cardArray, loading: true });\r\n                    setTimeout(() => {\r\n                        if (cardItem.Id < 0) {\r\n                            this.handleReset(true);\r\n                        }\r\n                        if (cardTemp.Status !== CardStatus.matched) {\r\n                            cardTemp.Status = CardStatus.reverse;\r\n                            cardArray = updateCardArray(cardArray, cardTemp);\r\n                        }\r\n                        cardItem.Status = CardStatus.reverse;\r\n                        cardArray = updateCardArray(cardArray, cardItem);\r\n                        cardTemp = new Card();\r\n                        this.setState({ cardArray, cardTemp, loading: false });\r\n                    }, 2000);\r\n                }\r\n                this.validarVictoria();\r\n                this.setState({ tries: tries + 1 });\r\n            }\r\n        }\r\n    }\r\n\r\n    public validarVictoria() {\r\n        setTimeout(() => {\r\n            const { cardArray, tries } = this.state;\r\n            let aciertos = cardArray.filter(\r\n                item => item.Id <= 0\r\n                    && item.Status === CardStatus.matched\r\n            ).length;\r\n            let traps = cardArray.filter(\r\n                item => item.Id < 0\r\n            ).length;\r\n\r\n            if (aciertos == cardArray.length - traps) {\r\n                alert(`Felicidades, ha ganado el juego en ${tries} intentos`);\r\n                this.handleReset();\r\n            }\r\n        }, 2000);\r\n    }\r\n\r\n    render() {\r\n        const { tries, cardArray } = this.state;\r\n        const { level } = this.props;\r\n        return (\r\n            <div>\r\n                <div className=\"container\">\r\n                    <StatusBar\r\n                        tries={tries}\r\n                        onHome={() => {\r\n                            this.handleReset();\r\n                            this.props.onHome();\r\n                        }}\r\n                        level={level}\r\n                        onReset={this.handleReset.bind(this)}\r\n                    />\r\n                    <div className='row'>\r\n                        {\r\n\r\n                            cardArray.map(\r\n                                (cardItem: Card, index: number) =>\r\n                                    <div key={index + 1} className=\"col-3\">\r\n                                        <MCard\r\n                                            card={cardItem}\r\n                                            onCard={() => this.handleCard(cardItem)}\r\n                                        />\r\n                                    </div>\r\n                            )\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    };\r\n};","import * as React from 'react';\r\nimport { Level } from './Level';\r\nimport ILevel from './ILevel';\r\nimport { getJSONByLevel, getLevelName } from './LevelUtils';\r\n\r\ntype Props = {\r\n    onSelectLevel: (level: ILevel) => void;\r\n};\r\n\r\nconst StatusBar = (props: Props) => {\r\n    const {\r\n        onSelectLevel\r\n    } = props;\r\n    return (\r\n        <select\r\n            defaultValue={Level.normal}\r\n            className=\"form-select form-select-sm\"\r\n            onChange={(op) => {\r\n                onSelectLevel({\r\n                    cards: getJSONByLevel(Number(op.target.value)),\r\n                    level: Number(op.target.value)\r\n                });\r\n            }}>\r\n            <option value={Level.baby}>\r\n                {getLevelName(Level.baby)}\r\n            </option>\r\n            <option value={Level.normal}>\r\n                {getLevelName(Level.normal)}\r\n            </option>\r\n            <option value={Level.seriously}>\r\n                {getLevelName(Level.seriously)}\r\n            </option>\r\n            <option value={Level.imposible}>\r\n                {getLevelName(Level.imposible)}\r\n            </option>\r\n        </select>\r\n    );\r\n}\r\n\r\nexport default StatusBar;","import * as React from 'react';\r\nimport { Screen } from './screen';\r\nimport Board from './Board/index';\r\nimport MButton from './MButton';\r\nimport { Level } from './Levels/Level';\r\nimport Levels from './Levels';\r\nimport ILevel from './Levels/ILevel';\r\nimport { getJSONByLevel } from './Levels/LevelUtils';\r\n\r\ntype Props = {\r\n\r\n};\r\ntype State = {\r\n    screen: number;\r\n    level: ILevel;\r\n};\r\n\r\nexport default class Main extends React.Component<Props, State>{\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            screen: Screen.main,\r\n            level: {\r\n                level: Level.normal,\r\n                cards: getJSONByLevel(Level.normal)\r\n            },\r\n        }\r\n        this.changeScreen = this.changeScreen.bind(this);\r\n        this.handleSelectLevel = this.handleSelectLevel.bind(this);\r\n    }\r\n\r\n    private switchView() {\r\n        const { screen, level } = this.state;\r\n        switch (screen) {\r\n            case Screen.main:\r\n                return (this.getMainView());\r\n            case Screen.board:\r\n                return <Board level={level} onHome={() => this.changeScreen(Screen.main)} />;\r\n        }\r\n    }\r\n\r\n    private getMainView(): JSX.Element {\r\n        return (\r\n            <div className='btn-group-vertical'>\r\n                <MButton text='Comenzar' mclick={() => this.changeScreen(Screen.board)} />\r\n                <Levels\r\n                    onSelectLevel={this.handleSelectLevel}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private changeScreen(screen: number) {\r\n        this.setState({ screen });\r\n    }\r\n\r\n    private handleSelectLevel(level: ILevel) {\r\n        this.setState({ level });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div >\r\n                <h1 className=\"text-danger\">Memory</h1>\r\n                {this.switchView()}\r\n            </div>\r\n        );\r\n    };\r\n};","import logo from './logo.svg';\r\nimport './App.css';\r\nimport Main  from './components/Main';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Main/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}