{"version":3,"sources":["components/screen.ts","components/Board/Card/CardStatus.ts","logo.svg","components/Board/Card/index.tsx","components/MButton/index.tsx","components/Board/StatusBar/index.tsx","components/Board/Card/Card.ts","components/Board/Card/CardUtils.ts","components/Board/index.tsx","components/Main.tsx","App.js","reportWebVitals.js","index.js"],"names":["Screen","CardStatus","MCard","props","card","onCard","icon","Icon","color","Status","reverse","uncovered","Id","matched","onClick","className","aria-hidden","MButton","mclick","text","console","log","disabled","StatusBar","onHome","tries","onReset","Card","updateCardArray","cardArray","cardItem","map","initialState","cardTemp","loading","Board","state","this","setState","JSON","parse","stringify","data","Cards","sort","Math","random","isTrap","setTimeout","handleReset","validarVictoria","filter","item","length","alert","bind","index","handleCard","React","Main","screen","main","changeScreen","configs","getMainView","board","switchView","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fe115f2f.chunk.js","sourcesContent":["export enum Screen{\r\n    main = 1,\r\n    configs,\r\n    board\r\n}","export enum CardStatus{\r\n    reverse = 1,\r\n    uncovered,\r\n    matched\r\n}","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import * as React from 'react';\r\nimport Card from './Card';\r\nimport { CardStatus } from './CardStatus';\r\n\r\ntype Props = {\r\n    onCard: () => void;\r\n    card: Card;\r\n};\r\n\r\nconst MCard = (props: Props) => {\r\n    const { card, onCard } = props;\r\n    let icon = card.Icon;\r\n    let color = ''\r\n    switch (card.Status) {\r\n        case CardStatus.reverse:\r\n            icon = \"times\";\r\n            break;\r\n        case CardStatus.uncovered:\r\n            color = card.Id === 9999 ? 'alert-danger' : 'alert-warning';\r\n            break;\r\n        case CardStatus.matched:\r\n            color = 'alert-success';\r\n            break;\r\n    }\r\n    //color = card.Id === 9999 ? 'alert-danger' : color;\r\n    return (\r\n        <div\r\n            onClick={onCard}\r\n            className={`card m-1 px-1 py-5 ${color}`}>\r\n            <i\r\n                className={`fa fa-${icon} fa-2x`}\r\n                aria-hidden=\"true\"\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MCard;","import * as React from 'react';\r\n\r\ntype Props = {\r\n    mclick?: () => void;\r\n    text: string;\r\n};\r\n\r\nconst MButton = (props: Props) => {\r\n    const { mclick, text } = props;\r\n    return (\r\n        <button\r\n            onClick={() => { mclick ? mclick() : console.log('') }}\r\n            disabled={mclick ? false : true}\r\n            className='btn btn-outline-dark mb-3 me-3 rounded'>\r\n            {text}\r\n        </button>\r\n    );\r\n}\r\n\r\nexport default MButton;","import * as React from 'react';\r\nimport MButton from '../../MButton';\r\n\r\ntype Props = {\r\n    tries: number;\r\n    onHome: () => void;\r\n    onReset: () => void;\r\n};\r\n\r\nconst StatusBar = (props: Props) => {\r\n    const { onHome, tries, onReset } = props;\r\n    return (\r\n        <div className='text-start'>\r\n            <div className='btn-group'>\r\n                <MButton text='Regresar' mclick={onHome} />\r\n                <MButton text={'Reiniciar'} mclick={onReset} />\r\n                <MButton text={`Intentos: ${tries}`} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default StatusBar;","import { CardStatus } from './CardStatus';\r\nexport default class Card {\r\n    constructor(\r\n        public Id: number = 0,\r\n        public Icon: string = \"times\",\r\n        public Status: number = CardStatus.reverse,\r\n    ) { }\r\n}","import Card from \"./Card\";\r\n\r\nexport const updateCardArray = (cardArray: Card[], cardItem: Card) => {\r\n    return cardArray.map(card => {\r\n        return cardItem.Id === card.Id ? cardItem : card;\r\n    });\r\n}","import * as React from 'react';\r\nimport MCard from './Card';\r\nimport StatusBar from './StatusBar/index';\r\nimport data from './Card/Cards.json';\r\nimport Card from './Card/Card';\r\nimport { CardStatus } from './Card/CardStatus';\r\nimport { updateCardArray } from './Card/CardUtils';\r\n\r\ntype Props = {\r\n    onHome: () => void;\r\n};\r\ntype State = {\r\n    tries: number;\r\n    cardArray: Card[],\r\n    cardTemp: Card,\r\n    loading: boolean\r\n};\r\n\r\nconst initialState: State = {\r\n    tries: 0,\r\n    cardArray: [],\r\n    cardTemp: new Card(),\r\n    loading: false\r\n}\r\n\r\nexport default class Board extends React.Component<Props, State>{\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = initialState\r\n    }\r\n\r\n    public componentDidMount() {\r\n        this.setState({\r\n            cardArray: JSON.parse(JSON.stringify(data.Cards.sort(\r\n                () => Math.random() - 0.5\r\n            )))\r\n        });\r\n    }\r\n\r\n    public handleReset(isTrap?: boolean) {\r\n        const { tries, cardArray } = this.state;\r\n        this.setState({\r\n            tries: isTrap ? tries : 0,\r\n            cardArray: isTrap\r\n                ? cardArray.sort(() => Math.random() - 0.5)\r\n                : JSON.parse(JSON.stringify(data.Cards.sort(\r\n                    () => Math.random() - 0.5\r\n                ))),\r\n            cardTemp: new Card(),\r\n            loading: false\r\n        });\r\n    }\r\n\r\n    private handleCard(cardItem: Card) {\r\n        let { cardArray, cardTemp, loading, tries } = this.state;\r\n        if (cardItem.Status !== CardStatus.matched && !loading && cardTemp.Id !== cardItem.Id) {\r\n            if (cardTemp.Id === 0) {\r\n                if (cardItem.Status === CardStatus.reverse) {\r\n                    cardItem.Status = CardStatus.uncovered;\r\n                    cardTemp = cardItem;\r\n                    cardArray = updateCardArray(cardArray, cardItem);\r\n                    this.setState({ cardArray, cardTemp });\r\n                    if (cardItem.Id == 9999) {\r\n                        setTimeout(() => {\r\n                            //alert(\"Has caido en una trampa :P\");\r\n                            cardItem.Status = CardStatus.reverse;\r\n                            this.setState({ cardArray });\r\n                            this.handleReset(true);\r\n                        }, 2000);\r\n                    }\r\n                };\r\n            } else {\r\n                if (cardTemp.Icon === cardItem.Icon) {\r\n                    cardTemp.Status = CardStatus.matched;\r\n                    cardArray = updateCardArray(cardArray, cardTemp);\r\n                    cardItem.Status = CardStatus.matched;\r\n                    cardArray = updateCardArray(cardArray, cardItem);\r\n                    cardTemp = new Card();\r\n                    this.setState({ cardArray, cardTemp });\r\n                } else {\r\n                    cardItem.Status = CardStatus.uncovered;\r\n                    cardArray = updateCardArray(cardArray, cardItem);\r\n                    this.setState({ cardArray, loading: true });\r\n                    setTimeout(() => {\r\n                        if (cardItem.Id == 9999) {\r\n                            //alert(\"Has caido en una trampa :P\");\r\n                            this.handleReset(true);\r\n                        }\r\n                        if (cardTemp.Status !== CardStatus.matched) {\r\n                            cardTemp.Status = CardStatus.reverse;\r\n                            cardArray = updateCardArray(cardArray, cardTemp);\r\n                        }\r\n                        cardItem.Status = CardStatus.reverse;\r\n                        cardArray = updateCardArray(cardArray, cardItem);\r\n                        cardTemp = new Card();\r\n                        this.setState({ cardArray, cardTemp, loading: false });\r\n                    }, 2000);\r\n                }\r\n                this.validarVictoria();\r\n                this.setState({ tries: tries + 1 });\r\n            }\r\n        }\r\n    }\r\n\r\n    public validarVictoria() {\r\n        setTimeout(() => {\r\n            const { cardArray, tries } = this.state;\r\n            let aciertos = cardArray.filter(\r\n                item => item.Id !== 9999\r\n                    && item.Status === CardStatus.matched\r\n            ).length;\r\n            if (aciertos == cardArray.length-1) {\r\n                alert(`Felicidades, ha ganado el juego en ${tries} intentos`);\r\n                this.handleReset();\r\n            }\r\n        }, 2000);\r\n    }\r\n\r\n    render() {\r\n        const { tries, cardArray } = this.state;\r\n        return (\r\n            <div>\r\n                <div className=\"container\">\r\n                    <StatusBar\r\n                        tries={tries}\r\n                        onHome={() => {\r\n                            this.handleReset();\r\n                            this.props.onHome();\r\n                        }}\r\n                        onReset={this.handleReset.bind(this)}\r\n                    />\r\n                    <div className='row'>\r\n                        {\r\n\r\n                            cardArray.map(\r\n                                (cardItem: Card, index: number) =>\r\n                                    <div key={index + 1} className=\"col-3\">\r\n                                        <MCard\r\n                                            card={cardItem}\r\n                                            onCard={() => this.handleCard(cardItem)}\r\n                                        />\r\n                                    </div>\r\n                            )\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    };\r\n};","import * as React from 'react';\r\nimport { Screen } from './screen';\r\nimport Board from './Board/index';\r\nimport MButton from './MButton';\r\n\r\ntype Props = {\r\n\r\n};\r\ntype State = {\r\n    screen: number;\r\n};\r\n\r\nexport default class Main extends React.Component<Props, State>{\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            screen: Screen.main\r\n        }\r\n\r\n        this.changeScreen = this.changeScreen.bind(this);\r\n    }\r\n\r\n    private switchView() {\r\n        const { screen } = this.state;\r\n        switch (screen) {\r\n            case Screen.main:\r\n                return (this.getMainView());\r\n            case Screen.configs:\r\n                return (this.getMainView());\r\n            case Screen.board:\r\n                return <Board onHome={() => this.changeScreen(Screen.main)} />;\r\n        }\r\n    }\r\n\r\n    private getMainView(): JSX.Element {\r\n        return (\r\n            <div className='btn-group-vertical'>\r\n                <MButton text='Comenzar' mclick={() => this.changeScreen(Screen.board)} />\r\n                <MButton text='Configuraciones' mclick={() => this.changeScreen(Screen.configs)} />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private changeScreen(screen: number) {\r\n        this.setState({ screen });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div >\r\n                <h1 className=\"text-danger\">Memory</h1>\r\n                {this.switchView()}\r\n            </div>\r\n        );\r\n    };\r\n};","import logo from './logo.svg';\r\nimport './App.css';\r\nimport Main  from './components/Main';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Main/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}